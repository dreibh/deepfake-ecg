#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ==========================================================================
#         ____                   __       _          _____ ____ ____
#        |  _ \  ___  ___ _ __  / _| __ _| | _____  | ____/ ___/ ___|
#        | | | |/ _ \/ _ \ '_ \| |_ / _` | |/ / _ \ |  _|| |  | |  _
#        | |_| |  __/  __/ |_) |  _| (_| |   <  __/ | |__| |__| |_| |
#        |____/ \___|\___| .__/|_|  \__,_|_|\_\___| |_____\____\____|
#                        |_|
#
#                       --- Deepfake ECG Generator ---
#                https://github.com/vlbthambawita/deepfake-ecg
# ==========================================================================
#
# Command-Line Generator Tool
# Copyright (C) 2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: Thomas Dreibholz <dreibh@simula.no>

import sys
sys.path.append('..')

import deepfakeecg
import getopt
import matplotlib.pyplot
import numpy


# ###### Print usage and exit ###############################################
def usage(exitCode = 0):
   sys.stdout.write('Usage: ' + sys.argv[0] + ' [-t|--type ECG8|ECG12] [-f|--format numpy|ascii] [-o|--output filename_pattern]\n')
   sys.exit(exitCode)


# ###### Main program #######################################################

# ====== Set defaults =======================================================
ecgType           = deepfakeecg.DATA_ECG8
ecgLength         = 5000
ecgNumber         = 1
outputFilePattern = 'ecg-{number}.csv'
outputFormat      = deepfakeecg.OUTPUT_CSV

# ====== Handle arguments ===================================================
try:
   options, args = getopt.getopt(
      sys.argv[1:],
      'n:t:l:f:o:',
      [ 'number=',
        'ecgtype=',
        'length=',
        'format=',
        'output='
      ])
   for option, optarg in options:
      if option in ( '-n', '--number' ):
         try:
            ecgNumber = int(optarg)
            if ecgNumber < 1:
               raise Exception()
         except:
            sys.stderr.write('ERROR: Invalid ECG number ' + optarg + '!\n')
            sys.exit(1)
      elif option in ( '-t', '--type' ):
         if optarg == 'ECG8':
            ecgType = deepfakeecg.DATA_ECG8
         elif optarg == 'ECG12':
            ecgType = deepfakeecg.DATA_ECG12
         else:
            sys.stderr.write('ERROR: Invalid ECG type ' + optarg + '!\n')
            sys.exit(1)
      elif option in ( '-l', '--length' ):
         try:
            ecgLength = int(optarg)
            if ecgLength < 50:
               raise Exception()
         except:
            sys.stderr.write('ERROR: Invalid ECG length ' + optarg + '!\n')
            sys.exit(1)
      elif option in ( '-o', '--output' ):
         outputFilePattern = optarg
      elif option in ( '-f', '--format' ):
         if optarg == 'numpy':
            outputFormat = deepfakeecg.OUTPUT_NUMPY
         elif optarg == 'ascii':
            outputFormat = deepfakeecg.OUTPUT_ASC
         elif optarg == 'csv':
            outputFormat = deepfakeecg.OUTPUT_CSV
         else:
            sys.stderr.write('ERROR: Invalid format ' + optarg + '!\n')
            sys.exit(1)
      else:
         sys.stderr.write('ERROR: Invalid option ' + option + '!\n')
         sys.exit(1)

except getopt.GetoptError as error:
   sys.stderr.write('ERROR: ' + error + '\n')
   usage(1)
if len(args) > 0:
   usage(1)

# ====== Generate ECGs ======================================================
results = deepfakeecg.generate_NEW(ecgNumber, ecgType, ecgLength,
                                   outputFormat, outputFilePattern,
                                   0)
